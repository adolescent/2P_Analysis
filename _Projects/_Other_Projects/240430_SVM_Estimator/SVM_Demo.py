
'''
This is a demo of SVM Classifier, generated by GPT.
This will help us to get the correct describe of each point's decision distance.
'''

#%%
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.svm import SVC

# Generate some random data for demonstration
X, y = make_blobs(n_samples=200, centers=2,n_features=2,random_state=6456)
#%%
# Create an SVM classifier
svm = SVC(probability=True,kernel='linear')
# svm = SVC(probability=True)

# Train the SVM classifier
svm.fit(X, y)

# Generate some test data for evaluation
X_test, y_test = make_blobs(n_samples=50,centers=2,random_state=6456)

# Obtain the distances from the decision boundary
distances = svm.decision_function(X_test)

# Get the class probabilities
probabilities = svm.predict_proba(X_test)

# Get the predicted classes
predicted_classes = svm.predict(X_test)

# Plot the data points with colors indicating the predicted classes
plt.scatter(X_test[:, 0], X_test[:, 1], c=predicted_classes, cmap='viridis')

# Plot the decision boundary
ax = plt.gca()
xlim = ax.get_xlim()
ylim = ax.get_ylim()

# Create a grid to evaluate the model
xx = np.linspace(xlim[0], xlim[1], 100)
yy = np.linspace(ylim[0], ylim[1], 100)
YY, XX = np.meshgrid(yy, xx)
xy = np.vstack([XX.ravel(), YY.ravel()]).T
Z = svm.decision_function(xy).reshape(XX.shape)

# Plot decision boundary and margins
ax.contour(XX, YY, Z, colors='k', levels=[-1, 0, 1], alpha=0.5,
           linestyles=['--', '-', '--'])
ax.scatter(svm.support_vectors_[:, 0], svm.support_vectors_[:, 1], s=100,
           linewidth=1, facecolors='none', edgecolors='k')

plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('SVM Classification')

plt.show()

# Print the distances and probabilities for each point
# for i in range(len(X_test)):
#     print(f"Point {i+1}: Distance from decision boundary: {distances[i]}, Class probabilities: {probabilities[i]}")

# distances.sort()
plt.plot(distances)